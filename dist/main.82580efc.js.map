{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","console","log","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":"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","file":"main.82580efc.js","sourceRoot":"..\\src","sourcesContent":["// console.log(jQuery)  可验证是否成功引入jQuery\r\nconst $siteList = $('.siteList') //这里通过jquery获取到了选择器对应的元素\r\nconst $lastLi = $siteList.find('li.last')//通过.find方法查找class为last的元素\r\nconst x = localStorage.getItem('x')//用了localStorage后，hashMap的初始值应该是从setItem()中的x读出来，而不是提前写好（但是又需要保留hashMap初始的两个元素，所以下面hashMap用了||）\r\nconst xObject = JSON.parse(x)//JSON.parse()可以把string变Object。parse()是不能解析空字符串的，但是通过console.log(xObject)打出来发现会返回null，不会报错\r\nconst hashMap = xObject || [\r\n    { logo: 'A', url: 'https://www.acfun.cn' },//里面可以加logoType: 'text'来限定变量logo的类型\r\n    { logo: 'B', url: 'https://www.bilibili.com' },\r\n]\r\n\r\nconst simplifyUrl = (url) => {//该函数实现每个元素的url不完全显示，看起来更简洁\r\n    return url.replace('https://', '')\r\n        .replace('http://', '')\r\n        .replace('www.', '')//.replace()只会产生一个新的字符串，不会改变原本的url,所以不能return url，因为url没有变\r\n        .replace(/\\/.*/, '')//  \\是转义，/.*表示/后面的任何东西\r\n}\r\n\r\nconst render = () => {\r\n    $siteList.find('li:not(.last)').remove()//唯独不要最后一个li。该句放在这是因为在渲染hashMap前，要把前面的两个会重复出现的元素删掉\r\n    hashMap.forEach((node, index) => {//node是接受的参数，即hashMap数组中的每一个索引值\r\n        const $li = $(`<li>\r\n        <div class=\"site\">\r\n        <div class=\"logo\">${node.logo}</div>\r\n        <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n        <div class=\"close\">\r\n        <svg class=\"icon\" >\r\n            <use xlink:href=\"#icon-close\"></use>\r\n        </svg>\r\n        </div>\r\n    </div>    \r\n            </li>`).insertBefore($lastLi)\r\n        $li.on('click', () => {//用.on()函数代替了原本包裹上面html元素的a标签\r\n            window.open(node.url) //.open()打开一个新窗口\r\n        })\r\n        $li.on('click', '.close', (e) => {//e是拿到这个事件\r\n            console.log('跳转了')\r\n            e.stopPropagation() //当点击.close时，就会阻止冒泡，即点击.close元素不会向上触发其祖先元素\r\n            console.log(hashMap)\r\n            hashMap.splice(index, 1) //该方法删掉数组中第几个。表示从index这里删掉1个，即删掉自身index值\r\n            render() //删掉自身索引值后要重新渲染\r\n        }) //$li返回的就是jQuery()内部return的对象，这个对象中有很多方法可以操作$li获取到元素，.on()就是一个方法\r\n    });\r\n}\r\nrender()\r\n\r\n$('.addButton')  //本来jQuery代码是：window.jQuery = function('.xxx'){const elements = querySelector('.yyy');return{on(){}}}\r\n    .on('click', () => {\r\n        let url = window.prompt('请问你要添加的网址是啥？')//只需要定义变量，就可以拿到用户在prompt弹窗输入的网址\r\n        if (url.indexOf('http') !== 0) {//如果url第一个字符是http\r\n            url = 'https://' + url\r\n        }\r\n        console.log(url)\r\n        hashMap.push({\r\n            logo: simplifyUrl(url)[0].toUpperCase(),//实现每个新增元素的显示文字以网址[0]值开头\r\n            url: url\r\n        });\r\n        render()\r\n        // hashMap.forEach(node => {//node是接受的参数，即hashMap数组中的每一个索引值\r\n        //     const $li = $(`<li>\r\n        //     <a href=\"${node.url}\">\r\n        //                     <div class=\"site\">\r\n        //                         <div class=\"logo\">${node.logo[0]}</div>\r\n        //                         <div class=\"link\">${node.url}</div>\r\n        //                     </div>\r\n        //                 </a>\r\n        //     </li>`).insertBefore($lastLi)\r\n        // })\r\n        // const $li = $(`<li>\r\n        // <a href=\"${url}\"> \r\n        //             <div class=\"site\">\r\n        //                 <div class=\"logo\">${url[0]}</div>\r\n        //                 <div class=\"link\">${url}</div>\r\n        //             </div>\r\n        //         </a>\r\n        // </li>`).insertBefore($lastLi)//.appendTo($siteList)//将jQuery获取到的$site插入$siteList\r\n    })\r\n\r\nwindow.onbeforeunload = () => {//该APIjs用户在关闭页面前会触发，这里面就可以把变量hashMap存下来，即localStorage,但是localStorage只能存字符串，不能存对象\r\n    // console.log('页面要关闭了') 验证该method是否管用\r\n    const string = JSON.stringify(hashMap)//JSON.stringify可以把一个对象变字符串。因为localStorage只能存字符串\r\n    window.localStorage.setItem('x', string)//localStorage是全局变量，window可以省略，setItem()接受两个值：key和value，key随便写。x表示存在x里。这句话的意思是：在本地存储中设置一个x,其值为string\r\n}\r\n\r\n// document.addEventListener()\r\n$(document).on('keypress', (e) => {\r\n    // const key = e.key 当变量名与属性名相同，可以简写为\r\n    const { key } = e\r\n    for (let i = 0; i <= hashMap.length; i++) {\r\n        if (hashMap[i].logo.toLowerCase() === key) {\r\n            window.open(hashMap[i].url)\r\n        }\r\n    }\r\n})\r\n"]}